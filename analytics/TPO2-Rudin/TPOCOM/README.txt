TPO-COM Instructions
===================
CODEBASE:
---------
TPO-COM comprises of java application jars and a few python utility scripts to
help adding new buildings. The code is at trunk/TPOCOM in the SVN repository.

PLATFORM AND LIBRARIES:
-----------------------
Runtime dependencies for running TPO-COM.
1.	Java 1.6
2.	Jetty 6.1.24

Set up dependencies.
1.	Python 2.7 
2.	XLRD 0.92
3.	pyodbc 3.0.7

Build dependencies.
1.  ant

BUILD:
------
TPO-COM can be built using ant builds. TPO-COM sender can be built by running
the following command in TPOCOM/TPOCOMSender/: `ant`. The executable jar file
can be found under TPOCOMSender/build/jar/

TPO-COM receiver service file *.aar can be built by doing running the follwing
comand in TPOCOM/TpoWSSB2_Server/:`ant`. The service *.aar file can be found
under TpoWSSB2_Server/build/aar/

SET UP FOR NEW BUILDINGS:
-------------------------
The TPOCOM/setup directory has utility files that make adding a new building to
TPOCOM easy:
1.	input_db_setup.py
This script takes the point list spreadsheet for a building and creates a new 
TPO database and the tables required to save the points being sent by SIF. The
script provides a detailed help on all its arguments.

Example: 'python input_db_setup.py pointlist.xlsx anderson.ldeo.columbia.edu
         user pwd'

2.	output_db_setup.py
This script takes the point list spreadsheet for a building and creates a TPO 
database and the tables required to save the points to be generated by TPO. In
addition it also creates the tracker tables required to track the points sent 
to SIF. The script provides a detailed help on all its arguments. 

Example: 'python output_db_setup.py pointlist.xlsx anderson.ldeo.columbia.edu
         user pwd'

3.	receiver_config_generate.py
This script generates the configuration file for TPOCOM  receiver. It takes 
points list, TPO database server details as input. It can generate a new 
configuration file or just add a new building to the existing receiver 
configuration file. The script provides a detailed help on all its arguments. 

Example: 'python receiver_config_generate.py pointlist.xlsx 
          anderson.ldeo.columbia.edu user pwd TPOCOMreceiverConfig.xml'

4.	sender_config_generate.py
This script generates the configuration file for TPOCOM sender. It takes points
list, TPO database server, SIF endpoint, TPO endpoint, TPOCOM settings as 
input. It can generate a new configuration file or just add a new building to 
the existing sender configuration file. The script provides a detailed help on 
all its arguments. 

Example: 'python sender_config_generate.py pointlist.xlsx 
          anderson.ldeo.columbia.edu usr pwd dibossws.selex-es.com 80 
          129.236.31.170 8080 000TPO NYC.COL1.CEN 900 1.0 600000 60 
          TPOCOMSenderConfig.xml'

Once the above four steps are performed, use the deployment instructions to
start TPO-COM for the new building.

WARNING: The set up scripts heavily depend on the format of the pointlist 
published by Fabrizio and team. Any change in the format of the poinlist 
spreadsheet has to be undestood and then the set up script will have to be
updated accordingly. Most important things that set up scripts rely on are 
column data and tab name substring ( TPO-input, TPO-output)

DEPLOYMENT:
-----------
TPO-COM has a sender and a receiver component. First deploy the receiver 
component and then the sender. 

1.
TPO-COM receiver service build generates a *.aar file. To start the receiver 
service copy the aar file under `$JETTY_HOME\webapps\axis2\WEB-INF\services` 
and run the below command from $JETTY_HOME directory: `java -jar start.jar`.
Config file for the receiver should be specified in the following file: 
$JETTY_HOME\webapps\axis2\WEB-INF\jetty-env.xml

2.
TPO-COM sender build generates an executable jar file. To start the sender just
run the below command: ‘java -jar TPOCOMsender.jar TPOCOMSenderConfig.xml`.

SOME IMPORTANT DETAILS:
-----------------------
1) It is recommended to always start TPOCOM receiver first and then TPOCOM
   sender.
2) Selex owns the following packages that are used by TPOCOM: TpoWSSB2_Client,
   TpoWSSB2_Server and XmlTool. Jetty server 6.1.24
2) If Selex sends updated code for TpoWSSB2_Client or XmlTool, just replace old versions in svn. 
   But if they send updated version of TpoWSSB2_Server make sure to check it in svn replacing
   the current version but keep your implementation of the onMessageAndResponse method
   in Wssb2Impl.java present in package TpoWSSB2_Server.
3) Wssb2Impl.java creates static objects of ConnectionManager, MsgDispatcher and 
   Configuration. This is done in order to avoid creating a new instance of these 
   objects when we receive messages. The Jetty server creates a new instance of 
   Wssb2Impl class for every new message it receives
4) TPOCOM runs its own scheduler. But you need to set up .bat files to start the 
   receiver and sender when the machine restarts. 
5) The receiver and the sender can be gracefully shutdown by using Ctrl + c

 

